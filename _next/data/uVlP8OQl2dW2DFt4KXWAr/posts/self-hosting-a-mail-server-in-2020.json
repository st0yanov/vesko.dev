{"pageProps":{"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/assets/images/mailbox.jpg\",\n    \"alt\": null,\n    \"title\": \"Mailbox Cover\"\n  }))), mdx(\"p\", null, \"You have some sort of application that has to deliver email. You are also a tech savvy person who believes in the \\u201Cemail is decentralised\\u201D mantra so you decide to self-host a mail server yourself. Not so fast. In the following paragraphs I will try to summarise what I have learnt and what it is like to self-host a mail server in 2020.\"), mdx(\"p\", null, \"It all started a month ago when I launched a small community-driven tech newsletter. The newsletter application consisted of a simple static website and a simple backend for dealing with subscriptions and email deliveries. Deploying to production I had to configure the application\\u2019s SMTP settings so I googled about the most recent trends.\"), mdx(\"p\", null, \"Almost every article I read stated:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Self-hosting a mail server is hard, better use some Cloud/SaaS solution.\")), mdx(\"p\", null, \"Why is it hard though? No arguments on that. I decided to give it a shot.\"), mdx(\"p\", null, \"After a short research I started a Postfix instance in a docker container. A few hours later I successfully configured my domain to work with the SMTP server and sent a test email. It arrived in the SPAM folder of my Gmail account.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Lesson #1: Running your own mail server is easy. What is hard is to configure it correctly.\")), mdx(\"p\", null, \"The first thing I instantly noticed was that my email was delivered unencrypted.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/assets/images/no_encryption.png\",\n    \"alt\": null,\n    \"title\": \"No Encryption\"\n  }))), mdx(\"p\", null, \"Gmail warns me that the email was not encrypted.\"), mdx(\"p\", null, \"I quickly fixed that with a certificate provided by Let\\u2019s Encrypt. There are a lot of step-by-step tutorials on the topic. Now my emails are encrypted but are still classified as Spam.\"), mdx(\"p\", null, \"I decided to quit the guesswork and a few minutes later I arrived at\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://support.google.com/mail/answer/81126?hl=en\"\n  }), \"this helpful page\"), \". Here is a quick checklist of what you need to do in order to pass the Spam classification when delivering to Gmail:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Static IP\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Reverse DNS on your IP address that points to the domain you use for sending emails\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"DKIM\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"SPF\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"DMARC\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Confirmation email before adding to subscription list\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Unsubscribe link\")), mdx(\"p\", null, \"1, 6, 7 were already done on my side. I continued with the configuration of my mail server with DKIM, SPF and DMARC. Apart from the DNS records there is also a decent amount of configuration that has to be done on the server-side.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Lesson #2: A usable mail server needs a carefully designed architecture, maintenance and continuous awareness of the most recent security and content practices.\")), mdx(\"p\", null, \"At this point I decided to check for some community driven mail server (architecture) projects because it requires a lot of knowledge and effort to run a usable mail server. My requirements were the following:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Dockerized\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Popular and regularly maintained\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Well-documented\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Easy to setup\")), mdx(\"p\", null, \"I quickly arrived at the following solutions:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://mailinabox.email/\"\n  }), \"Mail-in-a-Box\"), \"\\u200A\\u2014\\u200Ait isn\\u2019t Dockerized and you need a dedicated server or VM in order not to pollute your environment with whatnot. It might be easy to run in a custom docker container but I prefer an officially supported solution.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://mailu.io/\"\n  }), \"Mailu\"), \"\\u200A\\u2014\\u200Ait is Dockerized and well-documented but in my opinion not easy to setup. I expect a docker-compose up to be enough so I can check up a demo of the project. After some issues with networking and certificates I decided to move on.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://mailcow.email/\"\n  }), \"Mailcow\"), \"\\u200A\\u2014\\u200ADockerized, popular, well-documented and easy to install. I managed to get up and running in less than 30 minutes. The project provides a neat admin UI, as well as a nice looking mailboxes for your domain accounts. Mailcow also guided me how to correctly setup my DNS records. It is just awesome! (P.S. I\\u2019m not affiliated in any way with Mailcow)\")), mdx(\"p\", null, \"I was ready to send another test email. Fingers crossed\\u200A\\u2014\\u200ABOOM! My email arrived at the Spam folder once again. The only thing I hadn\\u2019t done from the checklist was the Reverse DNS. My ISP refused to add a Reverse DNS record to my IP address that points to my domain. I was compliant with everything but this and there was nothing I could do about it.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"At this point I decided to follow the recommendation to just use some cloud mail delivery\\xA0service.\")), mdx(\"p\", null, \"All of them offer a \\u201CFree\\u201D plan which pretty much is more than enough for any small project. You can start delivering emails in 10 minutes and hurray\\u200A\\u2014\\u200Athey arrive at the Primary folder of your mailbox. Those companies make the hassle of running your own mail server look silly and not worth it. Keep in mind however that you may need to update your application\\u2019s Terms of Use and/or Privacy Policy because you are sharing people\\u2019s personal data with a third-party service. Also although you are using a \\u201CFree\\u201D plan you cannot start to deliver with most of the services before providing your debit/credit card details.\"), mdx(\"p\", null, \"I checked out the most popular services and decided to give Amazon SES a try. It worked perfectly. However I quickly realised that I need to use their other cloud services in order to be able not only to send but also to receive emails.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Lesson #3: Even paid mail transport services have downsides which you need to consider.\")), mdx(\"p\", null, \"I continued digging the self-hosted mail server topic. Let\\u2019s assume you even have a Reverse DNS record setup on your IP address. Is there anything else that can stop you? Yes\\u200A\\u2014\\u200Athere is\\xA0:). Your IP address might be included in one or more Spam blacklists which many email providers take into account when assessing your emails. Most of them incorporate a process for unbanning IP addresses but this might take some time and communication.\"), mdx(\"p\", null, \"Other things to keep in mind when self-hosting a mail server:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Your mail server\\u2019s IP address is ALWAYS exposed and you cannot do anything about it.\"), \"\\xA0This is the way emails work. If you host you application on the same server even behind Cloudflare or other proxy, you can easily become a victim of a DoS/DDoS attack.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setting up a Spam filter on your mail server can prevent malicious uses of your MTA which can result in your IP address being blacklisted.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Final lesson: Mail servers are stable. Once you go through all the hassle, you can relax and enjoy your\\xA0setup.\")), mdx(\"p\", null, \"In conclusion my personal feeling about self-hosting a mail server is positive. Setting up a self-hosted mail server for a volume of a few hundred emails a month is not only an overhead but also will cost more than using some mail service provider. However for big volumes I would definitely walk the extra mile with the self-hosting way.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><img src=\"/assets/images/mailbox.jpg\" title=\"Mailbox Cover\"/></p><p>You have some sort of application that has to deliver email. You are also a tech savvy person who believes in the “email is decentralised” mantra so you decide to self-host a mail server yourself. Not so fast. In the following paragraphs I will try to summarise what I have learnt and what it is like to self-host a mail server in 2020.</p><p>It all started a month ago when I launched a small community-driven tech newsletter. The newsletter application consisted of a simple static website and a simple backend for dealing with subscriptions and email deliveries. Deploying to production I had to configure the application’s SMTP settings so I googled about the most recent trends.</p><p>Almost every article I read stated:</p><blockquote><p>Self-hosting a mail server is hard, better use some Cloud/SaaS solution.</p></blockquote><p>Why is it hard though? No arguments on that. I decided to give it a shot.</p><p>After a short research I started a Postfix instance in a docker container. A few hours later I successfully configured my domain to work with the SMTP server and sent a test email. It arrived in the SPAM folder of my Gmail account.</p><blockquote><p>Lesson #1: Running your own mail server is easy. What is hard is to configure it correctly.</p></blockquote><p>The first thing I instantly noticed was that my email was delivered unencrypted.</p><p><img src=\"/assets/images/no_encryption.png\" title=\"No Encryption\"/></p><p>Gmail warns me that the email was not encrypted.</p><p>I quickly fixed that with a certificate provided by Let’s Encrypt. There are a lot of step-by-step tutorials on the topic. Now my emails are encrypted but are still classified as Spam.</p><p>I decided to quit the guesswork and a few minutes later I arrived at <a href=\"https://support.google.com/mail/answer/81126?hl=en\">this helpful page</a>. Here is a quick checklist of what you need to do in order to pass the Spam classification when delivering to Gmail:</p><ol><li>Static IP</li><li>Reverse DNS on your IP address that points to the domain you use for sending emails</li><li>DKIM</li><li>SPF</li><li>DMARC</li><li>Confirmation email before adding to subscription list</li><li>Unsubscribe link</li></ol><p>1, 6, 7 were already done on my side. I continued with the configuration of my mail server with DKIM, SPF and DMARC. Apart from the DNS records there is also a decent amount of configuration that has to be done on the server-side.</p><blockquote><p>Lesson #2: A usable mail server needs a carefully designed architecture, maintenance and continuous awareness of the most recent security and content practices.</p></blockquote><p>At this point I decided to check for some community driven mail server (architecture) projects because it requires a lot of knowledge and effort to run a usable mail server. My requirements were the following:</p><ol><li>Dockerized</li><li>Popular and regularly maintained</li><li>Well-documented</li><li>Easy to setup</li></ol><p>I quickly arrived at the following solutions:</p><ol><li><a href=\"https://mailinabox.email/\">Mail-in-a-Box</a> — it isn’t Dockerized and you need a dedicated server or VM in order not to pollute your environment with whatnot. It might be easy to run in a custom docker container but I prefer an officially supported solution.</li><li><a href=\"https://mailu.io/\">Mailu</a> — it is Dockerized and well-documented but in my opinion not easy to setup. I expect a docker-compose up to be enough so I can check up a demo of the project. After some issues with networking and certificates I decided to move on.</li><li><a href=\"https://mailcow.email/\">Mailcow</a> — Dockerized, popular, well-documented and easy to install. I managed to get up and running in less than 30 minutes. The project provides a neat admin UI, as well as a nice looking mailboxes for your domain accounts. Mailcow also guided me how to correctly setup my DNS records. It is just awesome! (P.S. I’m not affiliated in any way with Mailcow)</li></ol><p>I was ready to send another test email. Fingers crossed — BOOM! My email arrived at the Spam folder once again. The only thing I hadn’t done from the checklist was the Reverse DNS. My ISP refused to add a Reverse DNS record to my IP address that points to my domain. I was compliant with everything but this and there was nothing I could do about it.</p><blockquote><p>At this point I decided to follow the recommendation to just use some cloud mail delivery service.</p></blockquote><p>All of them offer a “Free” plan which pretty much is more than enough for any small project. You can start delivering emails in 10 minutes and hurray — they arrive at the Primary folder of your mailbox. Those companies make the hassle of running your own mail server look silly and not worth it. Keep in mind however that you may need to update your application’s Terms of Use and/or Privacy Policy because you are sharing people’s personal data with a third-party service. Also although you are using a “Free” plan you cannot start to deliver with most of the services before providing your debit/credit card details.</p><p>I checked out the most popular services and decided to give Amazon SES a try. It worked perfectly. However I quickly realised that I need to use their other cloud services in order to be able not only to send but also to receive emails.</p><blockquote><p>Lesson #3: Even paid mail transport services have downsides which you need to consider.</p></blockquote><p>I continued digging the self-hosted mail server topic. Let’s assume you even have a Reverse DNS record setup on your IP address. Is there anything else that can stop you? Yes — there is :). Your IP address might be included in one or more Spam blacklists which many email providers take into account when assessing your emails. Most of them incorporate a process for unbanning IP addresses but this might take some time and communication.</p><p>Other things to keep in mind when self-hosting a mail server:</p><ul><li><strong>Your mail server’s IP address is ALWAYS exposed and you cannot do anything about it.</strong> This is the way emails work. If you host you application on the same server even behind Cloudflare or other proxy, you can easily become a victim of a DoS/DDoS attack.</li><li>Setting up a Spam filter on your mail server can prevent malicious uses of your MTA which can result in your IP address being blacklisted.</li></ul><blockquote><p>Final lesson: Mail servers are stable. Once you go through all the hassle, you can relax and enjoy your setup.</p></blockquote><p>In conclusion my personal feeling about self-hosting a mail server is positive. Setting up a self-hosted mail server for a volume of a few hundred emails a month is not only an overhead but also will cost more than using some mail service provider. However for big volumes I would definitely walk the extra mile with the self-hosting way.</p>","scope":{}},"frontMatter":{"slug":"self-hosting-a-mail-server-in-2020","title":"Self-hosting a mail server in 2020","description":"You have some sort of application that has to deliver email. You are also a tech savvy person who believes in the “email is decentralised” mantra so you decide to self-host a mail server yourself. Not so fast. In the following paragraphs I will try to summarise what I have learnt and what it is like to self-host a mail server in 2020.","date_published":"2019-02-23T22:00:00.000Z","date_modified":"2020-11-02T22:09:36.229Z","seo_keywords":["self hosting","mail server"],"seo_image":"/assets/images/self_hosting_mail_server.png","reading_time":{"text":"6 min read","minutes":5.49,"time":329400.00000000006,"words":1098}}},"__N_SSG":true}