{"pageProps":{"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/assets/images/network_cables.jpg\",\n    \"alt\": null,\n    \"title\": \"Network Cables\"\n  }))), mdx(\"p\", null, \"Recently I was looking for a way to push services\\u2019 images of a Docker Compose project to a private registry. In this article I\\u2019m going to save you some guesswork as the process is a bit ambiguous.\"), mdx(\"p\", null, \"Before we go any further let\\u2019s first set up the stage.\\nWe have a simple\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \"\\xA0file with the following contents:\"), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"version: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'3'\"), \"\\n\\nservices:\\n  myapp:\\n    build: ./services/myapp\\n\")), mdx(\"p\", null, \"I want to build the image and push it to my private Docker registry.\"), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose build\\n\")), mdx(\"p\", null, \"So far so\\xA0good. Everything builds well. I decide to check my local images:\"), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker images\\n\")), mdx(\"p\", null, \"And the first issue I notice is the bad naming of my image:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u201Cmyprojectname_myapp latest\\u201D\")), mdx(\"p\", null, \"Easy fix \\u2014 if you specify image as well as build configuration options, docker-compose will build the image with the specified image name and tag,\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.docker.com/compose/compose-file/#build\"\n  }), \"as described in the docs\"), \":\"), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"version: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'3'\"), \"\\n\\nservices:\\n  myapp:\\n    image: myproject/myapp:latest\\n    build: ./services/myapp\\n\")), mdx(\"p\", null, \"Now my image has appropriate naming and I want to push it. With the current setup, however,\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose push\"), \"\\xA0will try to push the project\\u2019s images to the Docker Hub registry. I don\\u2019t want this to happen.\"), mdx(\"p\", null, \"At first glance\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.docker.com/compose/compose-file/\"\n  }), \"the compose file reference\"), \"\\xA0doesn\\u2019t provide neither configuration nor information on how to push images to a private registry.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If y\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ou\"), \"\\xA0want to push an image to a private registry you need to\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.docker.com/engine/reference/commandline/push/#push-a-new-image-to-a-registry\"\n  }), \"follow those instructions\"), \":\\\\\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"1.\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker tag myproject/myapp:latest my-registry-host:5000/myproject/myapp:latest\"), \"\\\\\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"2.\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker push my-registry-host:5000/myproject/myapp:latest\"))), mdx(\"p\", null, \"There are some guides on the Internet suggesting automating those steps with a script but I don\\u2019t like this solution as I want to use the native tooling. A few minutes later I arrived at\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.docker.com/compose/reference/push/\"\n  }), \"the docker-compose push documentation page\"), \"\\xA0which includes a nice example.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"It looks like the image service configuration option follows the same notation as the example above:\")), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"version: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'3'\"), \"\\n\\nservices:\\n  myapp:\\n    image: my-registry-host:5000/myproject/myapp:latest\\n    build: ./services/myapp\\n\")), mdx(\"p\", null, \"Now when I execute\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose push\"), \"\\xA0my image gets pushed to my private image registry. There is something that still annoys me though \\u2014 if I decide to change the registry, I need to edit the image configuration option of all described services.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For this reason I like to extract the registry host as an environment variable:\")), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"REGISTRY_HOST\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \"my-registry-host:5000\\n\")), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"version: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'3'\"), \"\\n\\nservices:\\n  myapp:\\n    image: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"${REGISTRY_HOST}\"), \"/myproject/myapp:latest\\n    build: ./services/myapp\\n\")), mdx(\"p\", null, \"Congratulations! Now you will be able to build and distribute your project\\u2019s images by only using the native tooling provided by Docker and Docker Compose.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><img src=\"/assets/images/network_cables.jpg\" title=\"Network Cables\"/></p><p>Recently I was looking for a way to push services’ images of a Docker Compose project to a private registry. In this article I’m going to save you some guesswork as the process is a bit ambiguous.</p><p>Before we go any further let’s first set up the stage.\nWe have a simple <strong>docker-compose.yml</strong> file with the following contents:</p><pre class=\"language-bash\"><code class=\"language-bash\">version: <span class=\"token string\">&#x27;3&#x27;</span>\n\nservices:\n  myapp:\n    build: ./services/myapp\n</code></pre><p>I want to build the image and push it to my private Docker registry.</p><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose build\n</code></pre><p>So far so good. Everything builds well. I decide to check my local images:</p><pre class=\"language-bash\"><code class=\"language-bash\">docker images\n</code></pre><p>And the first issue I notice is the bad naming of my image:\n<code>“myprojectname_myapp latest”</code></p><p>Easy fix — if you specify image as well as build configuration options, docker-compose will build the image with the specified image name and tag, <a href=\"https://docs.docker.com/compose/compose-file/#build\">as described in the docs</a>:</p><pre class=\"language-bash\"><code class=\"language-bash\">version: <span class=\"token string\">&#x27;3&#x27;</span>\n\nservices:\n  myapp:\n    image: myproject/myapp:latest\n    build: ./services/myapp\n</code></pre><p>Now my image has appropriate naming and I want to push it. With the current setup, however, <code>docker-compose push</code> will try to push the project’s images to the Docker Hub registry. I don’t want this to happen.</p><p>At first glance <a href=\"https://docs.docker.com/compose/compose-file/\">the compose file reference</a> doesn’t provide neither configuration nor information on how to push images to a private registry.</p><blockquote><p>If y<em>ou</em> want to push an image to a private registry you need to <a href=\"https://docs.docker.com/engine/reference/commandline/push/#push-a-new-image-to-a-registry\">follow those instructions</a>:\\</p><p>1. <code>docker tag myproject/myapp:latest my-registry-host:5000/myproject/myapp:latest</code>\\</p><p>2. <code>docker push my-registry-host:5000/myproject/myapp:latest</code></p></blockquote><p>There are some guides on the Internet suggesting automating those steps with a script but I don’t like this solution as I want to use the native tooling. A few minutes later I arrived at <a href=\"https://docs.docker.com/compose/reference/push/\">the docker-compose push documentation page</a> which includes a nice example.</p><blockquote><p>It looks like the image service configuration option follows the same notation as the example above:</p></blockquote><pre class=\"language-bash\"><code class=\"language-bash\">version: <span class=\"token string\">&#x27;3&#x27;</span>\n\nservices:\n  myapp:\n    image: my-registry-host:5000/myproject/myapp:latest\n    build: ./services/myapp\n</code></pre><p>Now when I execute <code>docker-compose push</code> my image gets pushed to my private image registry. There is something that still annoys me though — if I decide to change the registry, I need to edit the image configuration option of all described services.</p><blockquote><p>For this reason I like to extract the registry host as an environment variable:</p></blockquote><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">REGISTRY_HOST</span><span class=\"token operator\">=</span>my-registry-host:5000\n</code></pre><pre class=\"language-bash\"><code class=\"language-bash\">version: <span class=\"token string\">&#x27;3&#x27;</span>\n\nservices:\n  myapp:\n    image: <span class=\"token variable\">${REGISTRY_HOST}</span>/myproject/myapp:latest\n    build: ./services/myapp\n</code></pre><p>Congratulations! Now you will be able to build and distribute your project’s images by only using the native tooling provided by Docker and Docker Compose.</p>","scope":{}},"frontMatter":{"slug":"pushing-docker-images-to-a-private-registry-with-docker-compose","title":"Pushing Docker images to a private registry with Docker Compose","description":"Recently I was looking for a way to push services’ images of a Docker Compose project to a private registry. In this article I’m going to save you some guesswork as the process is a bit ambiguous.","date_published":"2019-05-17T21:00:00.000Z","date_modified":"2020-11-03T20:56:05.433Z","seo_keywords":["docker","docker compose","docker image","private docker registry","docker registry"],"seo_image":"/assets/images/pushing_docker_images_to_a_private_registry_with_docker_compose.png","reading_time":{"text":"3 min read","minutes":2.01,"time":120600,"words":402}}},"__N_SSG":true}